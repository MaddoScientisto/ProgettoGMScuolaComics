<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>PlayerDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    BaseSpeed = 1;//ayy lmao
    CurrentDirection = GameManager.CurrentDirection;
    IsWalking = false;
    CanMove = true;
    AnimationSpeed = 0.1;
    GravityMode = true;
    Gravity = 0.2;
    VerticalSpeed = 0;
    JumpSpeed = 3;
    HasHighJump = false;
    HighJumpPower = 1.5;
    
    Health = 3;
    MaxHealth = 3;
    
    Invulnerable = false;
    InvulnerabilityTimer = 100;
    
    GunLevel = 0;
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Invulnerable)
{
    InvulnerabilityTimer -= 1 * global.DeltaTime;
    if (InvulnerabilityTimer &lt;= 0)
    {
        Invulnerable = false;
        InvulnerabilityTimer = 100;
    }
}

        // Handle Movement
    IsWalking = false;
    var curSpeed = BaseSpeed * global.DeltaTime;
    var curGravity = Gravity * global.DeltaTime;
    if (CanMove) {
        if (IsKeyPressed(Keys.up) &amp;&amp; !GravityMode) {
            MoveObject(curSpeed, Directions.up, true);
            IsWalking = true;
            CurrentDirection = Directions.up;
        }
        else if (IsKeyPressed(Keys.down) &amp;&amp; !GravityMode) {
            MoveObject(curSpeed, Directions.down, true);
            IsWalking = true;
            CurrentDirection = Directions.down;
        }
        else if (IsKeyPressed(Keys.right)) {
            MoveObject(curSpeed, Directions.right, true);
            IsWalking = true;
            CurrentDirection = Directions.right;
        }
        else if (IsKeyPressed(Keys.left)) {
            MoveObject(curSpeed, Directions.left, true);
            IsWalking = true;
            CurrentDirection = Directions.left;
        }
        
    }
    if (VerticalSpeed &lt; 10) VerticalSpeed += curGravity;
    if (VerticalSpeed &lt; -20) VerticalSpeed = 20;
    if (GravityMode) 
    {
        
    
        // Jump
        if (IsKeyPressed(Keys.action1)) {
            
           // check if player is grounded
            if (place_meeting(x,y+VerticalSpeed,SolidObject) ||
            place_meeting(x,y+VerticalSpeed, obj_oneWaySolidUp))
            {
                if (!HasHighJump)                       
                   VerticalSpeed = -JumpSpeed * global.DeltaTime;
                else
                    VerticalSpeed = -(JumpSpeed*HighJumpPower) * global.DeltaTime;
                
            }
        
        }
        
        if (IsKeyReleased(Keys.action1)) {
            if (sign(VerticalSpeed) == -1)
            {
                VerticalSpeed /= 1.5;
            }
        }
        
        // Collision
        if (place_meeting(x,y+VerticalSpeed,SolidObject))
        {
            while(!place_meeting(x,y+sign(VerticalSpeed),SolidObject))
            {
                y += sign(VerticalSpeed);
            }
            VerticalSpeed = 0;
        }
        
        if (VerticalSpeed &gt;= 0)
        {
            if (place_meeting(x,y+VerticalSpeed,obj_oneWaySolidUp))
            {
                while(!place_meeting(x,y+sign(VerticalSpeed),obj_oneWaySolidUp))
                {
                    y += sign(VerticalSpeed);
                }
                VerticalSpeed = 0;
            }
        }
       
        if (VerticalSpeed &lt; 0)
        {
            if (place_meeting(x,y+VerticalSpeed,obj_oneWaySolidDown))
        {
            while(!place_meeting(x,y+sign(VerticalSpeed),obj_oneWaySolidDown))
            {
                y += sign(VerticalSpeed);
            }
            VerticalSpeed = 0;
        }
        }
        
        y += VerticalSpeed;
        
        //MoveObject(curGravity, Directions.down, true);
    }

 // Shooting
 
 if (IsKeyPressed(Keys.action2) &amp;&amp; GunLevel&gt; 0) {
    var bullet = -1;
    var bx = 0;
    if (CurrentDirection == Directions.right)
    {
        bx = sprite_width - 2;
    }
    else 
    {
        bx = 0;
    }
    if (GunLevel &lt;= 2)
    {
        bullet = instance_create(x+bx,y+6,obj_bullet);
    }
    else
    {
       bullet = instance_create(x+bx,y+6,obj_bullet2);
    }
        
        bullet.CurrentDirection = CurrentDirection;
 }
    
if (IsKeyPressed(Keys.cancel) &amp;&amp; GunLevel&gt; 1) {
        //GravityMode = !GravityMode;
    //var bullet = instance_create(x,y+6, obj_bullet);
    
    var bullet = -1;
    if (GunLevel &lt;= 2)
    {
        bullet = instance_create(x,y+6,obj_bullet);
    }
    else
    {
       bullet = instance_create(x,y+6,obj_bullet2);
    }
    
    bullet.CurrentDirection = Directions.up;

}

if (Health &lt;= 0) {
    room_goto(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gun2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
instance_destroy();

if (GunLevel &lt; 3)
GunLevel = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flareGun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
instance_destroy();

if (GunLevel &lt; 2)
GunLevel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
instance_destroy();

if (GunLevel == 0)
GunLevel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_health">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
{
    instance_destroy();
}

if (Health &lt; MaxHealth)
Health += 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_healthUpgrade">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other)
instance_destroy();

MaxHealth += 1;
Health = MaxHealth;

//GameManager.
ds_map_add(GameManager.HealthPickups,room,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hurt">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (Invulnerable = false)
{
    var damage = other.Damage;
    Health -= damage;
    Invulnerable = true;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//    draw_self();
//image_index = 0;
if (IsWalking)
{
    image_speed = AnimationSpeed * global.DeltaTime
}
else 
{
    image_speed = 0;
    image_index = 0;
}

if (CurrentDirection == Directions.down)
{
    sprite_index = PlayerDown;
}
else if (CurrentDirection == Directions.right)
{
    sprite_index = spr_playerRight;
}
else if (CurrentDirection == Directions.left)
{
    sprite_index = spr_playerLeft;
}
else if (CurrentDirection == Directions.up)
{
    sprite_index = spr_playerUp;
}


var alpha;

if (Invulnerable)
{
    if (floor(InvulnerabilityTimer)%6 == 0)
    {
    alpha = 0;
//        image_alpha = 0;
    }
    else
    {
    alpha = 1;
        image_alpha = 1;
    }
}
else 
{
alpha = 1;
//    image_alpha = 1;
}
//draw_sprite(sprite_index, image_index, floor(x), floor(y));
draw_sprite_ext(sprite_index, image_index, floor(x), floor(y), image_xscale, image_yscale, 0, c_white, alpha);


//if (!Invulnerable || (Invulnerable &amp;&amp; InvulnerabilityTimer%2 == 0))
//draw_sprite(sprite_index, image_index, floor(x), floor(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
